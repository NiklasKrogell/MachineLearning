q()
esim1 <- function(otosKa, pjKeskihajonta, otosKoko, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2     #x = 0.995
virhetermi <- qnorm(x) * pjKeskihajonta / sqrt(otosKoko) #qnorm(x) = z
vasenAlaraja <- otosKa - virhetermi
oikeaYlaraja <- otosKa + virhetermi
return (c(vasenAlaraja, oikeaYlaraja))
}
esim1(14.8, 2.1, 100, 99)
options(digits = 10)
esim1(14.8, 2.1, 100, 99)
round(esim1(14.8, 2.1, 100, 99), 1)
return (n)
Otoskoko <- function(virhetermi, pjKeskihajonta, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2 #x = 0.995
n <- qnorm(x)^2 * pjKeskihajonta^2 / virhetermi^2 #Otoskoko vähintään
return (n)
}
Otoskoko(0.5, 1.5, 99)
ceiling(Otoskoko(0.5, 1.5, 99))
Keskihajonta <- function(otosKa, otosKeskihajonta, otosKoko, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2     #x = 0.9995
virhetermi <- qt(x, df = otosKoko - 1) * otosKeskihajonta / sqrt(otosKoko)
vasenAlaraja <- otosKa - virhetermi
oikeaYlaraja <- otosKa + virhetermi
return (c(vasenAlaraja, oikeaYlaraja))
}
Keskihajonta(20.8, 1.3, 10, 99.9)
round(Keskihajonta(20.8, 1.3, 10, 99.9))
round(Keskihajonta(20.8, 1.3, 10, 99.9), 1)
library(Hmisc)
install.packages("Hmisc")
gc()
library(Hmisc)
binconf((35/100*800), 800, alpha = 0.05, method = "asymptotic")
x <- binconf((35/100*800), 800, alpha = 0.05, method = "asymptotic")
round(x, 3)
x <- round(binconf((35/100*800), 800, alpha = 0.05, method = "asymptotic"), 3)
print(x)
View(x)
Virhemarg <- (Upper - Lower) / 2
Upper <- x[3]
Virhemarg <- (Upper - Lower) / 2
Lower <- x[2]
Virhemarg <- (Upper - Lower) / 2
Virhemarg
return (c(vasenAlaraja, oikeaYlaraja))
Keskihajonta <- function(p, q, n, luottamusvali){
p <- p/100
q <- q/100
luotvali <- 1 - (1 - luottamusvali/100) / 2   #luotvali =
z <- qnorm(luotvali)
virhetermi <- z * (sqrt((p*q) / n))
vasenAlaraja <- p - virhetermi
oikeaYlaraja <- p + virhetermi
return (c(vasenAlaraja, oikeaYlaraja))
}
View(Keskihajonta)
View(Keskihajonta)
round(Keskihajonta(35, 100 - 35, 800, 95))
Keskihajonta <- function(p, q, n, luottamusvali){
p <- p/100
q <- q/100
luotvali <- 1 - (1 - luottamusvali/100) / 2   #luotvali =
z <- qnorm(luotvali)
virhetermi <- z * (sqrt((p*q) / n))
vasenAlaraja <- p - virhetermi
oikeaYlaraja <- p + virhetermi
return (c(vasenAlaraja, oikeaYlaraja))
}
round(Keskihajonta(35, 100 - 35, 800, 95))
round(Keskihajonta(35, 100 - 35, 800, 95),3)
options(digits = 10)
data <- c(20.0, 18.6, 18.9, 19.3, 19.5, 19.2, 20.1, 20.2, 19.4,
18.8, 18.2, 19.4, 19.6, 20.1, 19.3, 18.7, 20.3, 19.5,
19.6, 19.7, 20.5, 18.6, 18.9, 19.3, 19.5, 19.2, 20.1,
20.2, 19.4, 18.8, 18.2, 19.4, 19.6, 20.1, 19.3, 18.7,
20.3, 19.5, 19.6, 19.7)
Keskiarvo <- round(mean(data), 2)
options(digits = 10)
data <- c(20.0, 18.6, 18.9, 19.3, 19.5, 19.2, 20.1, 20.2, 19.4,
18.8, 18.2, 19.4, 19.6, 20.1, 19.3, 18.7, 20.3, 19.5,
19.6, 19.7, 20.5, 18.6, 18.9, 19.3, 19.5, 19.2, 20.1,
20.2, 19.4, 18.8, 18.2, 19.4, 19.6, 20.1, 19.3, 18.7,
20.3, 19.5, 19.6, 19.7)
Keskiarvo <- round(mean(data), 2)
round(Hajonta, 2)
Hajonta <- sd(data) #hajonta otokselle
round(Hajonta, 2)
OtosKoko <- length(data)
return (c(vasenAlaraja, oikeaYlaraja))
Keskihajonta <- function(otosKa, otosKeskihajonta, otosKoko, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2     #x = 0.995
virhetermi <- qt(x, df = otosKoko - 1) * otosKeskihajonta / sqrt(otosKoko)
vasenAlaraja <- otosKa - virhetermi
oikeaYlaraja <- otosKa + virhetermi
return (c(vasenAlaraja, oikeaYlaraja))
}
Keskihajonta(Keskiarvo, Hajonta, OtosKoko, 99)
round(Keskihajonta(Keskiarvo, Hajonta, OtosKoko, 99), 2)
Luottamusvali <- function(otosKa, otosKeskihajonta, otosKoko, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2     #x = 0.995
virhetermi <- qt(x, df = otosKoko - 1) * otosKeskihajonta / sqrt(otosKoko)
vasenAlaraja <- otosKa - virhetermi
oikeaYlaraja <- otosKa + virhetermi
return (c(vasenAlaraja, oikeaYlaraja))
}
round(Luottamusvali(Keskiarvo, Hajonta, OtosKoko, 99), 2)
library(Hmisc)
x <- round(binconf((35/100*800), 800, alpha = 0.05, method = "asymptotic"), 3)
print(x)
#Teht2
library(Hmisc)
round(binconf((628/2300*100), 2300, alpha = 0.05, method = "asymptotic"), 3)
round(binconf(628, 2300, alpha = 0.05, method = "asymptotic"), 3)
#99% Luottamusväli
round(binconf(628, 2300, alpha = 0.001, method = "asymptotic"), 3)
#99% Luottamusväli
round(binconf(628, 2300, alpha = 0.01, method = "asymptotic"), 3)
Luottamusvali <- function(otosKa, otosKeskihajonta, otosKoko, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2     #x = 0.995
virhetermi <- qt(x, df = otosKoko - 1) * otosKeskihajonta / sqrt(otosKoko)
vasenAlaraja <- otosKa - virhetermi
oikeaYlaraja <- otosKa + virhetermi
return (c(vasenAlaraja, oikeaYlaraja))
}
#Ruuvien otoskeskiarvo = 18g, normaalijakauman varianssi 0.16^2
#95% luottamusväli, kun otoskoko on
#23
round(Luottamusvali(18, 0.16^2, 23, 95), 4)
#Ruuvien otoskeskiarvo = 18g, normaalijakauman varianssi 0.16^2
#95% luottamusväli, kun otoskoko on
#23
Luottamusvali(18, 0.16^2, 23, 95)
#Ruuvien otoskeskiarvo = 18g, normaalijakauman varianssi 0.16^2
#95% luottamusväli, kun otoskoko on
#23
Luottamusvali(18, 0.16, 23, 95)
#Ruuvien otoskeskiarvo = 18g, normaalijakauman varianssi 0.16^2
#95% luottamusväli, kun otoskoko on
#23
Luottamusvali(18, 0.4, 23, 95)
#2300
Luottamusvali(18, sqrt(0.16), 2300, 95)
#2300
Luottamusvali(18, 0.4, 2300, 95)
#2300
Luottamusvali(18, sqrt(0.16), 2300, 95)
#99% luottamusrajat perusjoukon keskiarvolle
Luottamusvali(12.4, sqrt(1.4), 30, 99)
#99% luottamusrajat perusjoukon keskiarvolle
Round(Luottamusvali(12.4, sqrt(1.4), 30, 99), 2)
#99% luottamusrajat perusjoukon keskiarvolle
round(Luottamusvali(12.4, sqrt(1.4), 30, 99), 2)
#99% luottamusrajat perusjoukon keskiarvolle
round(Luottamusvali(12.4, 1.4, 30, 99), 2)
#99% luottamusrajat perusjoukon keskiarvolle
round(Luottamusvali(12.4, 1.4, 30, 99), 3)
#Kuinka suuri otoskoko olisi vähintään pitänyt olla, jotta keskiarvo
#olisi saatu 99,9%:n varmuudella välille 12,4 ± 0,1, jos oletetaan,
#että perusjoukon hajonta olisi yllämainittu 1,4?
Otoskoko <- function(virhetermi, pjKeskihajonta, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2 #x = 0.995
n <- qnorm(x)^2 * pjKeskihajonta^2 / virhetermi^2 #Otoskoko vähintään
return (n)
}
Otoskoko(0.1, 1.4, 99.9)
ceiling(Otoskoko(0.1, 1.4, 99.9))
#teht5
#otosKoko = 3000, kyllä = 2115
#95%luottamusväli
round(binconf(2115, 3000, alpha = 0.05, method = "asymptotic"), 1)
#teht5
#otosKoko = 3000, kyllä = 2115
#95%luottamusväli
round(binconf(2115, 3000, alpha = 0.05, method = "asymptotic"), 3)
#teht5
#otosKoko = 3000, kyllä = 2115
#95%luottamusväli
round(binconf(2115, 3000, alpha = 0.05, method = "asymptotic"), 4)
#Teht6
#N(μ ; 2,2), Kuinka suuri otos on valittava, että μ:n 99 %:n
#luottamusvälin pituus ei ole suurempi kuin 1,5?
Otoskoko(1.5, 2.2, 99)
#Teht6
#N(μ ; 2,2), Kuinka suuri otos on valittava, että μ:n 99 %:n
#luottamusvälin pituus ei ole suurempi kuin 1,5?
Otoskoko(1.5, sqrt(2.2), 99)
Otoskoko((1.5/2), sqrt(2.2), 99)
ceiling(Otoskoko(0.1, 1.4, 99.9))
#Teht6
#N(μ ; 2,2), Kuinka suuri otos on valittava, että μ:n 99 %:n
#luottamusvälin pituus ei ole suurempi kuin 1,5?
Otoskokopieni <- function(virhetermi, pjKeskihajonta, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2 #x = 0.995
n <- qt(x)^2 * pjKeskihajonta^2 / virhetermi^2 #Otoskoko vähintään
return (n)
}
Otoskokopieni((1.5/2), sqrt(2.2), 99)
#Teht6
#N(μ ; 2,2), Kuinka suuri otos on valittava, että μ:n 99 %:n
#luottamusvälin pituus ei ole suurempi kuin 1,5?
#x = otoksen keskiarvo
# = perusjoukon keskihajonta = sqrt(2.2)
#n = otoskoko = ratkaistaan
#z = jakauman kriittinen arvo = qnorm(luotvali <- 1 - (1 - luottamuspros/100) / 2)
Keskihajonta <- sqrt(2.2)
#Teht6
#N(μ ; 2,2), Kuinka suuri otos on valittava, että μ:n 99 %:n
#luottamusvälin pituus ei ole suurempi kuin 1,5?
Otoskoko(0.75, sqrt(2.2), 99)
#Kuinka suuri otoskoko olisi vähintään pitänyt olla, jotta keskiarvo
#olisi saatu 99,9%:n varmuudella välille 12,4 ± 0,1, jos oletetaan,
#että perusjoukon hajonta olisi yllämainittu 1,4?
Otoskoko <- function(virhetermi, pjKeskihajonta, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2 #x = 0.995
n <- qnorm(x)^2 * pjKeskihajonta^2 / virhetermi^2 #Otoskoko vähintään
return (n)
}
#Teht6
#N(μ ; 2,2), Kuinka suuri otos on valittava, että μ:n 99 %:n
#luottamusvälin pituus ei ole suurempi kuin 1,5?
Otoskoko(0.75, sqrt(2.2), 99)
#Teht6
#N(μ ; 2,2), Kuinka suuri otos on valittava, että μ:n 99 %:n
#luottamusvälin pituus ei ole suurempi kuin 1,5?
ceiling(Otoskoko(0.75, sqrt(2.2), 99))
#Teht6
#N(μ ; 2,2), Kuinka suuri otos on valittava, että μ:n 99 %:n
#luottamusvälin pituus ei ole suurempi kuin 1,5?
ceiling(Otoskoko(0.75, 2.2, 99))
#teht7
#heikin leposyke
data <- c(67, 62, 58, 74, 65, 66, 63)
Luottamusvali <- function(otosKa, otosKeskihajonta, otosKoko, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2     #x = 0.995
virhetermi <- qt(x, df = otosKoko - 1) * otosKeskihajonta / sqrt(otosKoko)
vasenAlaraja <- otosKa - virhetermi
oikeaYlaraja <- otosKa + virhetermi
return (c(vasenAlaraja, oikeaYlaraja))
}
#määritä 95%:n luottamusväli yhden desimaalin tarkkuudella
KA = mean(data)
#teht7
#heikin leposyke
data <- c(67, 62, 58, 74, 65, 66, 63)
#määritä 95%:n luottamusväli yhden desimaalin tarkkuudella
KA = mean(data)
Luottamusvali <- function(otosKa, otosKeskihajonta, otosKoko, luotRaja){
x <- 1 - (1 - luotRaja/100) / 2     #x = 0.995
virhetermi <- qt(x, df = otosKoko - 1) * otosKeskihajonta / sqrt(otosKoko)
vasenAlaraja <- otosKa - virhetermi
oikeaYlaraja <- otosKa + virhetermi
return (c(vasenAlaraja, oikeaYlaraja))
}
#määritä 95%:n luottamusväli yhden desimaalin tarkkuudella
KA <- round(mean(data), 2)
Hajonta <- sd(data) #hajonta otokselle
round(Hajonta, 2) #0.58
OtosKoko <- length(data) #40
Luottamusvali(KA, Hajonta, OtosKoko, 95)
round(Luottamusvali(KA, Hajonta, OtosKoko, 95),1)
#teht8 1500 vastaajaa, kyllä 52,9 %, määritä 95% luottamusväli
round(binconf((52.9/100*2300), 2300, alpha = 0.05, method = "asymptotic"), 3)
#teht8 1500 vastaajaa, kyllä 52,9 %, määritä 95% luottamusväli
round(binconf((52.9/100*2300), 2300, alpha = 0.05, method = "asymptotic"), 4)
x <- round(binconf((35/100*800), 800, alpha = 0.05, method = "asymptotic"), 3)
print(x)
#teht8 1500 vastaajaa, kyllä 52,9 %, määritä 95% luottamusväli
round(binconf((52.9/100*2300), 2300, alpha = 0.05, method = "asymptotic"), 3)
#teht8 1500 vastaajaa, kyllä 52,9 %, määritä 95% luottamusväli
round(binconf((52.9/100*1500), 1500, alpha = 0.05, method = "asymptotic"), 3)
oma_funktio <- function(ammatti = "opiskelija"){
paste("Olen ammatiltani", ammatti)
}
oma_funktio("insinööri")
options(digits=10)
library(caret)
library(ggplot2)
library(rattle)
library(dplyr)
# Luetaan data
data = read.csv("peli_data.csv")
# Luetaan data
data = read.csv("peli_data.csv")
setwd("~/Koneoppiminen/ML-R")
# Luetaan data
data = read.csv("peli_data.csv")
View(data)
# Pudotetaan pois kentät, jotka eivät sisällä ostoja
data <- filter(data, laskuri_ostot != 0)
summary(data)
# Uusi sarake penninvenyttäjä/tuhlari
data$tuhlari <- ifelse(data$avg_hinta > 5.00, "Tuhlari", "Penninvenyttäjä")
data$tuhlari <- as.factor(data$tuhlari)
# Putsataan turhat sarakkeet pois
df = subset(data, select = -c(kayttajaId,kayttajanIstuntoId,avg_hinta))
set.seed(123)
intrain <- createDataPartition(y = df$tuhlari, p = 0.7, list = FALSE)
training <- df[intrain, ]
testing <- df[-intrain, ]
dim(training)
dim(testing)
# tehdään päätöspuumalli
malli <- train(tuhlari ~., method = "rpart", data = training)
fancyRpartPlot(malli$finalModel)
# Tehdään ennustus testing datasetillä
ennuste <- predict(malli, newdata = testing)
confusionMatrix(ennuste, testing$tuhlari)
summary(malli$finalModel)
ggplot(data, aes(x = tuhlari, y = laskuri_ostot)) +
geom_boxplot()
# Klikkaukset
ggplot(data, aes(x = tuhlari, y = laskuri_peliklikkaukset)) +
geom_boxplot()
# Osumat
ggplot(data, aes(x = tuhlari, y = laskuri_osumat)) +
geom_boxplot()
options(digits=10)
library(caret)
library(ggplot2)
library(rattle)
library(dplyr)
# Luetaan data
data = read.csv("peli_data.csv")
# Pudotetaan pois kentät, jotka eivät sisällä ostoja
data <- filter(data, laskuri_ostot != 0)
summary(data)
# Uusi sarake penninvenyttäjä/tuhlari
data$tuhlari <- ifelse(data$avg_hinta > 5.00, "Tuhlari", "Penninvenyttäjä")
data$tuhlari <- as.factor(data$tuhlari)
# Putsataan turhat sarakkeet pois
df = subset(data, select = -c(kayttajaId,kayttajanIstuntoId,alustaTyyppi,avg_hinta))
set.seed(123)
intrain <- createDataPartition(y = df$tuhlari, p = 0.7, list = FALSE)
training <- df[intrain, ]
testing <- df[-intrain, ]
dim(training)
dim(testing)
# tehdään päätöspuumalli
malli <- train(tuhlari ~., method = "rpart", data = training)
fancyRpartPlot(malli$finalModel)
View(malli)
View(df)
fancyRpartPlot(malli$finalModel)
summary(malli$finalModel)
options(digits=10)
library(caret)
library(ggplot2)
library(rattle)
library(dplyr)
# Luetaan data
data = read.csv("peli_data.csv")
# Pudotetaan pois kentät, jotka eivät sisällä ostoja
data <- filter(data, laskuri_ostot != 0)
summary(data)
# Uusi sarake penninvenyttäjä/tuhlari
data$tuhlari <- ifelse(data$avg_hinta > 5.00, "Tuhlari", "Penninvenyttäjä")
data$tuhlari <- as.factor(data$tuhlari)
# Putsataan turhat sarakkeet pois
df = subset(data, select = -c(kayttajaId,kayttajanIstuntoId,avg_hinta))
set.seed(123)
intrain <- createDataPartition(y = df$tuhlari, p = 0.7, list = FALSE)
training <- df[intrain, ]
testing <- df[-intrain, ]
dim(training)
dim(testing)
# tehdään päätöspuumalli
malli <- train(tuhlari ~., method = "rpart", data = training)
fancyRpartPlot(malli$finalModel)
# Tehdään ennustus testing datasetillä
ennuste <- predict(malli, newdata = testing)
options(digits=10)
library(caret)
library(ggplot2)
library(rattle)
library(dplyr)
# Luetaan data
data = read.csv("peli_data.csv")
# Pudotetaan pois kentät, jotka eivät sisällä ostoja
data <- filter(data, laskuri_ostot != 0)
summary(data)
# Uusi sarake penninvenyttäjä/tuhlari
data$tuhlari <- ifelse(data$avg_hinta > 5.00, "Tuhlari", "Penninvenyttäjä")
data$tuhlari <- as.factor(data$tuhlari)
# Putsataan turhat sarakkeet pois
df = subset(data, select = -c(kayttajaId,kayttajanIstuntoId,avg_hinta))
set.seed(123)
intrain <- createDataPartition(y = df$tuhlari, p = 0.7, list = FALSE)
training <- df[intrain, ]
testing <- df[-intrain, ]
dim(training)
dim(testing)
# tehdään päätöspuumalli
malli <- train(tuhlari ~., method = "rpart", data = training, tuneGrid = expand.grid(cp = seq(0.0001, 0.01, length.out = 20)))
fancyRpartPlot(malli$finalModel)
fancyRpartPlot(malli$finalModel)
rpart.plot(malli$finalModel)
options(digits=10)
library(caret)
library(ggplot2)
library(rattle)
library(dplyr)
library(rpart) # tää
library(rpart.plot) # tää
# Luetaan data
data = read.csv("peli_data.csv")
# Pudotetaan pois kentät, jotka eivät sisällä ostoja
data <- filter(data, laskuri_ostot != 0)
summary(data)
# Uusi sarake penninvenyttäjä/tuhlari
data$tuhlari <- ifelse(data$avg_hinta > 5.00, "Tuhlari", "Penninvenyttäjä")
data$tuhlari <- as.factor(data$tuhlari)
# Putsataan turhat sarakkeet pois
df = subset(data, select = -c(kayttajaId,kayttajanIstuntoId,avg_hinta))
set.seed(123)
intrain <- createDataPartition(y = df$tuhlari, p = 0.7, list = FALSE)
training <- df[intrain, ]
testing <- df[-intrain, ]
dim(training)
dim(testing)
# tehdään päätöspuumalli
# malli <- train(tuhlari ~., method = "rpart", data = training)
malli <- rpart(tuhlari ~ ., data = training, cp = 0.001)
rpart.plot(malli)
# tehdään päätöspuumalli
# malli <- train(tuhlari ~., method = "rpart", data = training)
malli <- rpart(tuhlari ~ ., data = training)
rpart.plot(malli)
# tehdään päätöspuumalli
malli <- train(tuhlari ~., method = "rpart", data = training)
fancyRpartPlot(malli)
# Päätöspuu lopputehtävä
options(digits=10)
library(caret)
library(ggplot2)
library(rattle)
library(dplyr)
# Luetaan data
data = read.csv("peli_data.csv")
# Pudotetaan pois kentät, jotka eivät sisällä ostoja
data <- filter(data, laskuri_ostot != 0)
summary(data)
# Uusi sarake penninvenyttäjä/tuhlari
data$tuhlari <- ifelse(data$avg_hinta > 5.00, "Tuhlari", "Penninvenyttäjä")
data$tuhlari <- as.factor(data$tuhlari)
# Putsataan turhat sarakkeet pois
df = subset(data, select = -c(kayttajaId,kayttajanIstuntoId,avg_hinta))
set.seed(123)
intrain <- createDataPartition(y = df$tuhlari, p = 0.7, list = FALSE)
training <- df[intrain, ]
testing <- df[-intrain, ]
dim(training)
dim(testing)
# tehdään päätöspuumalli
malli <- train(tuhlari ~., method = "rpart", data = training)
fancyRpartPlot(malli$finalModel)
# Tehdään ennustus testing datasetillä
ennuste <- predict(malli, newdata = testing)
confusionMatrix(ennuste, testing$tuhlari)
summary(malli$finalModel)
options(digits=10)
library(caret)
library(ggplot2)
library(rattle)
library(dplyr)
# Luetaan data
data = read.csv("peli_data.csv")
# Pudotetaan pois kentät, jotka eivät sisällä ostoja
data <- filter(data, laskuri_ostot != 0)
summary(data)
# Uusi sarake penninvenyttäjä/tuhlari
data$tuhlari <- ifelse(data$avg_hinta > 5.00, "Tuhlari", "Penninvenyttäjä")
data$tuhlari <- as.factor(data$tuhlari)
# Putsataan turhat sarakkeet pois
df = subset(data, select = -c(kayttajaId,kayttajanIstuntoId,avg_hinta))
set.seed(123)
intrain <- createDataPartition(y = df$tuhlari, p = 0.7, list = FALSE)
training <- df[intrain, ]
testing <- df[-intrain, ]
dim(training)
dim(testing)
# tehdään päätöspuumalli
malli <- train(tuhlari ~., method = "rpart", data = training)
fancyRpartPlot(malli$finalModel)
# Tehdään ennustus testing datasetillä
ennuste <- predict(malli, newdata = testing)
confusionMatrix(ennuste, testing$tuhlari)
(malli$finalModel)
